import streamlit as st

# Password check (replace 'your_password')
if 'authenticated' not in st.session_state:
    password = st.text_input("Enter password:", type="password")
    if password == "572985":
        st.session_state.authenticated = True
    else:
        st.stop()
import PyPDF2
import streamlit as st
import io
import re
from typing import Dict, List, Tuple
from datetime import datetime

# Configure the page
st.set_page_config(
    page_title="LegalGuard AI", 
    page_icon="‚öñÔ∏è",
    layout="wide"
)

def extract_pdf_text(uploaded_file) -> Tuple[str, bool]:
    """
    Extract text from uploaded PDF file.
    Returns tuple of (extracted_text, success_flag)
    """
    try:
        # Create a PDF reader object
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        
        # Check if PDF has pages
        if len(pdf_reader.pages) == 0:
            return "", False
        
        # Extract text from all pages
        full_text = ""
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            full_text += page.extract_text() + "\n"
        
        return full_text, True
        
    except Exception as e:
        st.error(f"Error reading PDF: {str(e)}")
        return "", False

def analyze_nda_clauses(text: str) -> Dict[str, bool]:
    """
    Analyze NDA text for critical legal clauses required for law firm compliance.
    Returns dictionary with clause names and their presence status.
    """
    # Convert text to lowercase for case-insensitive matching
    text_lower = text.lower()
    
    # Define NDA-specific clause patterns optimized for law firm requirements
    clause_patterns = {
        "Confidentiality": [
            r"confidential\w*",
            r"proprietary.*information",
            r"non.?disclosure",
            r"trade secret",
            r"confidential.*material",
            r"secret.*information",
            r"privileged.*information"
        ],
        "Non-Compete": [
            r"non.?compete",
            r"restraint.*trade",
            r"competitive.*activity",
            r"solicitation.*restriction",
            r"exclusive.*dealing",
            r"non.?solicitation",
            r"competition.*restriction"
        ],
        "Governing Law": [
            r"governing law",
            r"governed by.*law",
            r"jurisdiction.*court",
            r"applicable law",
            r"laws of.*state",
            r"subject to.*law",
            r"construed.*under.*law"
        ],
        "Injunctive Relief": [
            r"injunctive.*relief",
            r"equitable.*relief",
            r"specific.*performance",
            r"monetary.*damages.*inadequate",
            r"irreparable.*harm",
            r"temporary.*restraining.*order",
            r"preliminary.*injunction"
        ],
        "Attorney Fees": [
            r"attorney.*fees",
            r"legal.*fees",
            r"costs.*expenses",
            r"prevailing.*party",
            r"reasonable.*attorney",
            r"litigation.*costs",
            r"collection.*costs"
        ]
    }
    
    results = {}
    
    for clause_name, patterns in clause_patterns.items():
        found = False
        for pattern in patterns:
            if re.search(pattern, text_lower):
                found = True
                break
        results[clause_name] = found
    
    return results

def generate_compliance_report(clause_results: Dict[str, bool], filename: str) -> str:
    """
    Generate a detailed compliance report for law firm use.
    """
    report_lines = []
    report_lines.append("=" * 60)
    report_lines.append("NDA COMPLIANCE REPORT")
    report_lines.append("=" * 60)
    report_lines.append(f"Document: {filename}")
    report_lines.append(f"Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report_lines.append(f"Generated by: LegalGuard AI v1.0")
    report_lines.append("")
    
    # Summary
    missing_clauses = [clause for clause, found in clause_results.items() if not found]
    found_clauses = [clause for clause, found in clause_results.items() if found]
    
    report_lines.append("EXECUTIVE SUMMARY:")
    report_lines.append("-" * 20)
    report_lines.append(f"Total Clauses Analyzed: {len(clause_results)}")
    report_lines.append(f"Clauses Found: {len(found_clauses)}")
    report_lines.append(f"Missing Clauses: {len(missing_clauses)}")
    report_lines.append(f"Compliance Score: {(len(found_clauses)/len(clause_results)*100):.1f}%")
    report_lines.append("")
    
    # Detailed findings
    report_lines.append("DETAILED FINDINGS:")
    report_lines.append("-" * 20)
    
    for clause, found in clause_results.items():
        status = "‚úì PRESENT" if found else "‚úó MISSING"
        risk_level = "LOW RISK" if found else "HIGH RISK"
        report_lines.append(f"{clause}: {status} [{risk_level}]")
    
    report_lines.append("")
    
    # Recommendations
    if missing_clauses:
        report_lines.append("RECOMMENDATIONS:")
        report_lines.append("-" * 20)
        for clause in missing_clauses:
            report_lines.append(f"‚Ä¢ Add {clause} clause to strengthen legal protection")
        report_lines.append("")
        report_lines.append("LEGAL DISCLAIMER:")
        report_lines.append("This automated analysis is for preliminary review only.")
        report_lines.append("Professional legal review is recommended before finalizing any agreement.")
    else:
        report_lines.append("CONCLUSION:")
        report_lines.append("-" * 20)
        report_lines.append("All critical NDA clauses are present.")
        report_lines.append("Document appears to meet standard compliance requirements.")
    
    report_lines.append("")
    report_lines.append("=" * 60)
    
    return "\n".join(report_lines)

def display_nda_analysis_results(clause_results: Dict[str, bool], filename: str):
    """
    Display NDA analysis results in law firm professional format.
    """
    # Separate found and missing clauses
    found_clauses = [clause for clause, found in clause_results.items() if found]
    missing_clauses = [clause for clause, found in clause_results.items() if not found]
    
    # Compliance score
    total_clauses = len(clause_results)
    found_count = len(found_clauses)
    compliance_percentage = (found_count / total_clauses) * 100
    
    # Display compliance score prominently
    if compliance_percentage == 100:
        st.success(f"üéØ **FULL COMPLIANCE** - {compliance_percentage:.0f}% ({found_count}/{total_clauses} clauses)")
    elif compliance_percentage >= 80:
        st.warning(f"‚ö†Ô∏è **PARTIAL COMPLIANCE** - {compliance_percentage:.0f}% ({found_count}/{total_clauses} clauses)")
    else:
        st.error(f"üö® **LOW COMPLIANCE** - {compliance_percentage:.0f}% ({found_count}/{total_clauses} clauses)")
    
    st.markdown("---")
    
    # Missing clauses section (priority display)
    if missing_clauses:
        st.subheader("üö® Missing Clauses:")
        for clause in missing_clauses:
            st.error(f"‚ùå {clause}")
    
    # Found clauses section  
    if found_clauses:
        st.subheader("‚úÖ Present Clauses:")
        for clause in found_clauses:
            st.success(f"‚úÖ {clause}")
    
    st.markdown("---")
    
    # Generate and offer report download
    compliance_report = generate_compliance_report(clause_results, filename)
    
    st.download_button(
        label="üìÑ Download Compliance Report",
        data=compliance_report,
        file_name=f"nda_compliance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        mime="text/plain",
        help="Download detailed compliance report for legal review"
    )

def main():
    """
    Main application function for LegalGuard AI NDA Compliance Checker.
    """
    # App header with law firm branding
    st.title("‚öñÔ∏è NDA Compliance Checker")
    st.caption("For Law Firms - v1.0")
    st.markdown("**Professional NDA analysis tool for legal compliance verification**")
    st.markdown("---")
    
    # File upload section
    uploaded_file = st.file_uploader("Upload NDA (PDF)", type="pdf")
    
    if uploaded_file is not None:
        # Process the uploaded file
        with st.spinner("üîç Analyzing NDA for compliance..."):
            # Extract text from PDF
            extracted_text, extraction_success = extract_pdf_text(uploaded_file)
            
            if not extraction_success:
                st.error("‚ùå Failed to extract text from the PDF. Please ensure the file is not corrupted and contains readable text.")
                return
            
            if not extracted_text.strip():
                st.warning("‚ö†Ô∏è No text could be extracted from this PDF. The document might be image-based or encrypted.")
                return
            
            # Count words for basic validation
            word_count = len(extracted_text.split())
            
            if word_count < 10:
                st.warning("‚ö†Ô∏è Very little text was extracted. Please verify this is a text-based PDF document.")
                return
            
            # Analyze NDA clauses
            clause_analysis = analyze_nda_clauses(extracted_text)
            
            # Display results in professional law firm format
            display_nda_analysis_results(clause_analysis, uploaded_file.name)
            
            # Optional: View extracted text for legal review
            with st.expander("üìù View Extracted Text (for legal review)", expanded=False):
                st.text_area(
                    "Extracted NDA Text",
                    value=extracted_text[:3000] + ("..." if len(extracted_text) > 3000 else ""),
                    height=400,
                    help="First 3000 characters of extracted text for legal verification"
                )
    
    else:
        # Display instructions when no file is uploaded
        st.info("üìÅ Upload an NDA document to begin compliance analysis")
        
        # Information about the specific clauses this tool analyzes
        with st.expander("‚ÑπÔ∏è Critical NDA Clauses Analyzed", expanded=False):
            st.markdown("""
            **LegalGuard AI analyzes the following critical NDA clauses:**
            
            ‚Ä¢ **Confidentiality** - Core non-disclosure provisions and information protection
            ‚Ä¢ **Non-Compete** - Competitive restrictions and solicitation limitations  
            ‚Ä¢ **Governing Law** - Jurisdiction and applicable legal framework
            ‚Ä¢ **Injunctive Relief** - Equitable remedies for breach of confidentiality
            ‚Ä¢ **Attorney Fees** - Cost allocation and prevailing party provisions
            
            **Professional Disclaimer:** This automated analysis provides preliminary compliance 
            checking for law firm review. Professional legal analysis is required for final 
            contract approval and risk assessment.
            """)

if __name__ == "__main__":
    main()
