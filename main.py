import PyPDF2
import streamlit as st
import io
import re
from typing import Dict, List, Tuple
from datetime import datetime

# Configure the page
st.set_page_config(
    page_title="LegalGuard AI", 
    page_icon="⚖️",
    layout="wide"
)

# Password authentication
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    st.title("🔒 Authentication Required")
    
    with st.form("password_form"):
        password = st.text_input("Enter access password:", type="password", key="pw_input")
        submitted = st.form_submit_button("Enter")
        
        if submitted:
            if password == "Password":  # CHANGE THIS
                st.session_state.authenticated = True
                st.experimental_rerun()
            else:
                st.error("⛔ Incorrect password. Access denied.")
                st.stop()
        else:
            st.stop()

def extract_pdf_text(uploaded_file) -> Tuple[str, bool]:
    """Extract text from uploaded PDF file."""
    try:
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        if len(pdf_reader.pages) == 0:
            return "", False
        
        full_text = ""
        for page in pdf_reader.pages:
            full_text += page.extract_text() + "\n"
        return full_text, True
        
    except Exception as e:
        st.error(f"Error reading PDF: {str(e)}")
        return "", False

def analyze_nda_clauses(text: str) -> Dict[str, bool]:
    """Analyze NDA text for critical legal clauses."""
    text_lower = text.lower()
    clause_patterns = {
        "Confidentiality": [
            r"confidential\w*", r"proprietary.*information", r"non.?disclosure",
            r"trade secret", r"confidential.*material", r"secret.*information"
        ],
        "Non-Compete": [
            r"non.?compete", r"restraint.*trade", r"competitive.*activity",
            r"solicitation.*restriction", r"exclusive.*dealing"
        ],
        "Governing Law": [
            r"governing law", r"governed by.*law", r"jurisdiction.*court",
            r"applicable law", r"laws of.*state"
        ],
        "Injunctive Relief": [
            r"injunctive.*relief", r"equitable.*relief", r"specific.*performance",
            r"monetary.*damages.*inadequate", r"irreparable.*harm"
        ],
        "Attorney Fees": [
            r"attorney.*fees", r"legal.*fees", r"costs.*expenses",
            r"prevailing.*party", r"reasonable.*attorney"
        ]
    }
    
    return {
        clause: any(re.search(p, text_lower) for p in patterns)
        for clause, patterns in clause_patterns.items()
    }

def generate_compliance_report(clause_results: Dict[str, bool], filename: str) -> str:
    """Generate detailed compliance report."""
    report = [
        "=" * 60,
        "NDA COMPLIANCE REPORT",
        "=" * 60,
        f"Document: {filename}",
        f"Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"Generated by: LegalGuard AI v1.0\n",
        "EXECUTIVE SUMMARY:",
        "-" * 20,
        f"Total Clauses Analyzed: {len(clause_results)}",
        f"Clauses Found: {sum(clause_results.values())}",
        f"Missing Clauses: {sum(not v for v in clause_results.values())}",
        f"Compliance Score: {(sum(clause_results.values())/len(clause_results)*100):.1f}%\n",
        "DETAILED FINDINGS:",
        "-" * 20
    ]
    
    report.extend(
        f"{clause}: {'✓ PRESENT' if found else '✗ MISSING'} "
        f"[{'LOW RISK' if found else 'HIGH RISK'}]"
        for clause, found in clause_results.items()
    )
    
    if missing := [c for c, f in clause_results.items() if not f]:
        report.extend([
            "\nRECOMMENDATIONS:", "-" * 20,
            *[f"• Add {clause} clause" for clause in missing],
            "\nLEGAL DISCLAIMER:",
            "This automated analysis is for preliminary review only.",
            "Professional legal review is recommended."
        ])
    else:
        report.extend([
            "\nCONCLUSION:", "-" * 20,
            "All critical NDA clauses are present.",
            "Document meets standard compliance requirements."
        ])
    
    report.append("\n" + "=" * 60)
    return "\n".join(report)

def display_nda_analysis_results(clause_results: Dict[str, bool], filename: str):
    """Display analysis results in Streamlit."""
    compliance = sum(clause_results.values()) / len(clause_results) * 100
    if compliance == 100:
        st.success(f"🎯 FULL COMPLIANCE - {compliance:.0f}%")
    elif compliance >= 80:
        st.warning(f"⚠️ PARTIAL COMPLIANCE - {compliance:.0f}%")
    else:
        st.error(f"🚨 LOW COMPLIANCE - {compliance:.0f}%")
    
    st.markdown("---")
    
    if missing := [c for c, f in clause_results.items() if not f]:
        st.subheader("🚨 Missing Clauses:")
        for clause in missing:
            st.error(f"❌ {clause}")
    
    if found := [c for c, f in clause_results.items() if f]:
        st.subheader("✅ Present Clauses:")
        for clause in found:
            st.success(f"✅ {clause}")
    
    st.markdown("---")
    st.download_button(
        label="📄 Download Compliance Report",
        data=generate_compliance_report(clause_results, filename),
        file_name=f"nda_compliance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        mime="text/plain"
    )

def main():
    """Main application function."""
    st.title("⚖️ NDA Compliance Checker")
    st.caption("For Law Firms - v1.0")
    st.markdown("**Professional NDA analysis tool**")
    st.markdown("---")
    
    if uploaded_file := st.file_uploader("Upload NDA (PDF)", type="pdf"):
        with st.spinner("🔍 Analyzing NDA..."):
            text, success = extract_pdf_text(uploaded_file)
            if not success or not text.strip():
                st.error("❌ Failed to extract text")
                return
            
            if len(text.split()) < 10:
                st.warning("⚠️ Very little text extracted")
                return
            
            analysis = analyze_nda_clauses(text)
            display_nda_analysis_results(analysis, uploaded_file.name)
            
            with st.expander("📝 View Extracted Text", expanded=False):
                st.text_area(
                    "Extracted Text",
                    value=text[:3000] + ("..." if len(text) > 3000 else ""),
                    height=400
                )
    else:
        st.info("📁 Upload an NDA to begin")
        with st.expander("ℹ️ About"):
            st.markdown("""
            **Analyzes these NDA clauses:**
            - Confidentiality
            - Non-Compete
            - Governing Law
            - Injunctive Relief
            - Attorney Fees
            **Disclaimer:** For preliminary review only.
            """)

if __name__ == "__main__":
    main()
